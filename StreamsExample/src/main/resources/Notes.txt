to commit the code from eclipse to git hub see below video : https://www.youtube.com/watch?v=Huwf0TgWrOw

what need to be byheart/memorize
Streams Methods, java.util.Collectors methods

===============Java 8 new Features Notes============
syllabus :
----------

1. Introduction to Java 8
2. Java 8 features overview
3. Lamda Expressions
4. Functional interfaces
5. How to call the Lamda Expressions using the functional interfaces
6. Interface related changes in java 8
7. Defautlt methods in interfaces
8. Static methods in interfaces
9. Predicate
10. Function
11. Consumer
12. Supplier
13. Method reference using :: operator
14. Constructor reference using the :: operator
15. String Joiner class
16. Optional class
17. For Each method
18. SplitIterator
19. Stream API
20. Date and Time API (Zoda Framework)

-----------------------------------------------------------------------------------------------------------------------
Example Question :
-----------------

Id        name          sal             job
101       Krishna       10,000          Dev
102       AbcName       9,000           Test
103       PqrName       8,000           Cloud
104       tqrName       7,000           UI
105       xyzName       6,000           Dev

List<Employee> emps=userService.getEmps();

Requirement : Give me emp names from Dev department who are having the salary >=8000;

without Java Streams: lengthy code //Not Recomandaded
With Java Streams : emp.stream().filter(e->e.getSal()>=8000 && e.getJob().equalIgnoreCase("Dev")).collect(Collectors.toList());
---------------------------------------------------------------------------------------------------------------------------------

-> Java 1.8 onwards Functional Programming support is there.

Functional Programming vs OOps :
-------------------------------
-In Oops Classes and Object is the main entites
-if we want to create the method, it should me in a class only in Oops makes duplicate/boilerplate code even for single time use methods.


-In Functional Programming outsude of scope of the object, and that function we can assign to reference object/variable*********** here only funtional programming makes
difference.
-we can assign function to reference variable
//another class has refrence variable x <= some we written big method reference we can assign here. later you will understand that is the power of Lamda and Funtional interface.
-one method/funtion can be passed as a parameter to another funtion/method.

































